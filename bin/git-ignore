#!/usr/bin/env bash

echo "";

if [ $# -eq 0 ]; then
echo -e "Usage: $0 PROJECT_DIRECTORY\n"
echo -e "The PROJECT_DIRECTORY should be the root of a git project. If no .gitignore file exists yet, one will be created.\n";
exit 1;
fi

SOURCE="${BASH_SOURCE[0]}"
# resolve SOURCE until the file is no longer a symlink
while [ -h "${SOURCE}" ]; do
  SCRIPT_DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
  SOURCE="$(readlink "${SOURCE}")"
  # if SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${SOURCE} != /* ]] && SOURCE="${SCRIPT_DIR}/${SOURCE}"
done
SCRIPT_DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"

PROJECT_DIR=$1
GITIGNORE_FILE="${1}/.gitignore"
GITIGNORE_BACKUP_FILE="${1}/.gitignore.backup"
GITIGNORE_TEMPLATE_FILE="${SCRIPT_DIR}/gitignore_template.txt"

if [[ -e ${GITIGNORE_BACKUP_FILE} ]]; then
  echo "This script temporarily writes a backup file '${GITIGNORE_BACKUP_FILE}'. However, this file already exists."
  echo -e "To avoid data loss the process is aborted. You can manually remove this file and try again.\n"
  exit 1
fi

if [[ ! -e ${GITIGNORE_FILE} ]]; then
  echo "No .gitignore exists in project directory '$1'. Creating one."
  touch ${GITIGNORE_FILE}
fi

mv ${GITIGNORE_FILE} ${GITIGNORE_BACKUP_FILE}
cp ${GITIGNORE_TEMPLATE_FILE} ${GITIGNORE_FILE}

while IFS='' read -r line || [[ -n "${line}" ]]; do
  if ! grep -Fxq "${line}" "${GITIGNORE_FILE}" ; then
    echo "Expanding base git ignore with your custom statement '${line}'"
    echo "${line}" >> ${GITIGNORE_FILE}
  fi
done < "${GITIGNORE_BACKUP_FILE}"

rm ${GITIGNORE_BACKUP_FILE}

echo -e "Your git ignore file has been successfully created or updated.\n"
